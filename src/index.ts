import WebSocket from 'ws'

const ws = new WebSocket('ws://b-gql.ggbet.ru/graphql', ['graphql-ws']);
const token = 'uUb8pJTdXQHAS0itYsxE2-ajxnz64TizQqb7-v2oml4lzZSXBPVhDsfunMuxq-UNfAe3JficewDEdPVObC2144xQnHUZxV-pybDTddmQhoNjnL48iYbsws1Hvm9DA4XUsSpyyX6dYH3d9vy_MkCIjFz7I4A';

ws.onopen = async () => {
  await ws.send(JSON.stringify({"type":"connection_init","payload":{"headers":{"X-Auth-Token":token,"X-Theme":"ggbetru"},"X-Auth-Token":token}}))
  await ws.send(JSON.stringify({"id":"1","type":"start","payload":{"variables":{"offset":0,"limit":20,"marketStatuses":["ACTIVE","SUSPENDED"],"matchStatuses":["LIVE","SUSPENDED"],"sportEventTypes":["MATCH"],"sportIds":["esports_call_of_duty","esports_counter_strike","esports_dota_2","esports_hearthstone","esports_heroes_of_the_storm","esports_league_of_legends","esports_overwatch","esports_starcraft","esports_world_of_tanks","esports_street_fighter_5","esports_vainglory","esports_warcraft_3","esports_rainbow_six","esports_rocket_league","esports_smite","esports_soccer_mythical","esports_halo","esports_crossfire","esports_battlegrounds","esports_starcraft_1","esports_king_of_glory","esports_nba_2k18","esports_fortnite","esports_artifact","esports_dota_auto_chess","esports_apex_legends","esports_fifa","esports_basketball","esports_tennis","esports_formula_1","esports_ice_hockey","esports_rasing","esports_volleyball","esports_valorant","esports_specials"],"tournamentIds":[],"marketLimit":3,"isTopMarkets":true,"providerIds":[]},"extensions":{},"operationName":"GetMatchesByFilters","query":"query GetMatchesByFilters($offset: Int!, $limit: Int!, $search: String, $dateFrom: String, $dateTo: String, $providerIds: [Int!], $matchStatuses: [SportEventStatus!], $sportIds: [String!], $tournamentIds: [String!], $competitorIds: [String!], $marketStatuses: [MarketStatus!], $marketLimit: Int = 1, $isTopMarkets: Boolean = false, $dateSortAscending: Boolean, $sportEventTypes: [SportEventType!], $withMarketsCount: Boolean = true, $marketTypes: [Int!], $favorite: Boolean = false) {\n  matches: sportEventsByFilters(offset: $offset, limit: $limit, searchString: $search, dateFrom: $dateFrom, dateTo: $dateTo, providerIds: $providerIds, matchStatuses: $matchStatuses, sportIds: $sportIds, tournamentIds: $tournamentIds, competitorIds: $competitorIds, marketStatuses: $marketStatuses, sportEventTypes: $sportEventTypes, dateSortAscending: $dateSortAscending, marketTypes: $marketTypes, favorite: $favorite) {\n    ...Match\n    marketsCount @include(if: $withMarketsCount)\n  }\n}\n\nfragment Match on SportEvent {\n  ...MatchBase\n  markets(top: $isTopMarkets, limit: $marketLimit, statuses: $marketStatuses) {\n    ...Market\n  }\n}\n\nfragment MatchBase on SportEvent {\n  id\n  disabled\n  providerId\n  hasMatchLog\n  slug\n  meta {\n    name\n    value\n  }\n  fixture {\n    ...MatchFixture\n  }\n}\n\nfragment MatchFixture on SportEventFixture {\n  score\n  title\n  status\n  type\n  startTime\n  sportId\n  liveCoverage\n  streams {\n    id\n    locale\n    url\n    platforms {\n      type\n      enabled\n    }\n  }\n  tournament {\n    ...MatchTournament\n  }\n  competitors {\n    id: masterId\n    name\n    type\n    homeAway\n    logo\n    templatePosition\n    score {\n      id\n      type\n      points\n      number\n    }\n  }\n}\n\nfragment MatchTournament on Tournament {\n  id\n  name\n  masterId\n  countryCode\n  logo\n  description\n  showTournamentInfo\n  prizePool\n  dateStart\n  dateEnd\n  isLocalizationOverridden\n  slug\n}\n\nfragment Market on Market {\n  ...MarketBase\n  odds {\n    ...Odd\n  }\n}\n\nfragment MarketBase on Market {\n  id\n  name\n  status\n  typeId\n  priority\n  tags\n  specifiers {\n    name\n    value\n  }\n}\n\nfragment Odd on Odd {\n  id\n  name\n  value\n  isActive\n  status\n  competitorId\n}\n"}}));
  await ws.send(JSON.stringify({"id":"2","type":"start","payload":{"variables":{"sportIds":["esports_call_of_duty","esports_counter_strike","esports_dota_2","esports_hearthstone","esports_heroes_of_the_storm","esports_league_of_legends","esports_overwatch","esports_starcraft","esports_world_of_tanks","esports_street_fighter_5","esports_vainglory","esports_warcraft_3","esports_rainbow_six","esports_rocket_league","esports_smite","esports_soccer_mythical","esports_halo","esports_crossfire","esports_battlegrounds","esports_starcraft_1","esports_king_of_glory","esports_nba_2k18","esports_fortnite","esports_artifact","esports_dota_auto_chess","esports_apex_legends","esports_fifa","esports_basketball","esports_tennis","esports_formula_1","esports_ice_hockey","esports_rasing","esports_volleyball","esports_valorant","esports_specials"]},"extensions":{},"operationName":"GetSports","query":"query GetSports($sportIds: [String!]) {\n  sports(sportIds: $sportIds) {\n    id\n    name\n  }\n}\n"}}));
  await ws.send(JSON.stringify({"id":"3","type":"start","payload":{"variables":{},"extensions":{},"operationName":"GetMarketTemplates","query":"query GetMarketTemplates($marketTemplateIds: [Int!]) {\n  marketTemplates(marketTemplateIds: $marketTemplateIds) {\n    id\n    template\n  }\n}\n"}}));
  await ws.send(JSON.stringify({"id":"4","type":"start","payload":{"variables":{},"extensions":{},"operationName":"GetBannerZones","query":"query GetBannerZones {\n  bannerZones {\n    id\n  }\n}\n"}}));
  await ws.send(JSON.stringify({"id":"5","type":"start","payload":{"variables":{"offset":0,"limit":20,"marketStatuses":["ACTIVE","SUSPENDED"],"matchStatuses":["LIVE","SUSPENDED"],"sportEventTypes":["MATCH"],"sportIds":["esports_call_of_duty","esports_counter_strike","esports_dota_2","esports_hearthstone","esports_heroes_of_the_storm","esports_league_of_legends","esports_overwatch","esports_starcraft","esports_world_of_tanks","esports_street_fighter_5","esports_vainglory","esports_warcraft_3","esports_rainbow_six","esports_rocket_league","esports_smite","esports_soccer_mythical","esports_halo","esports_crossfire","esports_battlegrounds","esports_starcraft_1","esports_king_of_glory","esports_nba_2k18","esports_fortnite","esports_artifact","esports_dota_auto_chess","esports_apex_legends","esports_fifa","esports_basketball","esports_tennis","esports_formula_1","esports_ice_hockey","esports_rasing","esports_volleyball","esports_valorant","esports_specials"],"tournamentIds":[],"providerIds":[]},"extensions":{},"operationName":"GetCategorizer","query":"query GetCategorizer($dateFrom: String, $dateTo: String, $matchStatuses: [SportEventStatus!], $marketStatuses: [MarketStatus!], $sportEventTypes: [SportEventType!], $sportIds: [String!], $providerIds: [Int!]) {\n  categorizer(dateFrom: $dateFrom, dateTo: $dateTo, matchStatuses: $matchStatuses, marketStatuses: $marketStatuses, sportEventTypes: $sportEventTypes, sportIds: $sportIds, providerIds: $providerIds) {\n    field\n    value\n    name\n    count\n    meta {\n      name\n      value\n    }\n    children {\n      field\n      value\n      name\n      count\n      meta {\n        name\n        value\n      }\n    }\n  }\n}\n"}}));
};

ws.onmessage = (res) => {
  const json = JSON.parse(res.data);
  console.log(json);
};
